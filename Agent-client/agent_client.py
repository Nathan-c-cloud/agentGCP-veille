"""
Agent Fiscal V2 - Adapt√© pour utiliser la nouvelle collection de chunks
Version optimis√©e pour le RAG avec recherche sur chunks s√©mantiques.
"""

import functions_framework
from flask import jsonify
from google.cloud import firestore
import vertexai
from vertexai.generative_models import GenerativeModel
import os
from typing import List, Dict


# --- Configuration ---
PROJECT_ID = os.environ.get("PROJECT_ID", "agent-gcp-f6005")
LOCATION = "us-west1"

# --- Initialisation ---
vertexai.init(project=PROJECT_ID, location=LOCATION)
db = firestore.Client()
model = GenerativeModel("gemini-2.0-flash")

# --- Param√®tres de recherche ---
AGENTS_DISPONIBLES = [
    "fiscalite",
    "comptabilite",
    "ressources_humaines",
    "support_technique"
]

# --- Prompt syst√®me ---
PROMPT_SYSTEME = """
Tu es l'Agent Client, un LLM central jouant le r√¥le d'orchestrateur intelligent entre plusieurs agents sp√©cialis√©s 
(fiscal, comptable, administratif, juridique, int√©grateur, conseiller, etc.).

TA MISSION :
- Comprendre la demande du client.
- Identifier quel(s) agent(s) sp√©cialis√©(s) sont les plus pertinents pour y r√©pondre.
- Formuler des requ√™tes claires et contextualis√©es √† ces agents.
- Synth√©tiser et restituer la r√©ponse finale au client de mani√®re coh√©rente, fluide et professionnelle.

R√àGLES STRICTES :
1. Ne formule pas toi-m√™me une r√©ponse d'expert (fiscalit√©, comptabilit√©, etc.) si elle doit provenir d‚Äôun autre agent.
2. Si une demande n√©cessite plusieurs agents, coordonne leur ex√©cution et fusionne leurs r√©sultats.
3. Si aucune information n‚Äôest disponible ou si aucun agent n‚Äôest comp√©tent, r√©ponds :
   "Je n‚Äôai pas trouv√© cette information dans ma base de connaissances actuelle."
4. Cite toujours la ou les sources des informations (titre et URL) lorsque tu t‚Äôappuies sur des documents de contexte.
5. Sois pr√©cis, clair, professionnel et structur√© dans tes r√©ponses au client.
6. Si plusieurs agents te transmettent des informations compl√©mentaires, synth√©tise-les avec coh√©rence et logique m√©tier.
7. Maintiens un ton empathique et humain ‚Äî tu es le point de contact principal du client, pas un simple relais technique.

BUT FINAL :
Assurer une exp√©rience fluide, fiable et transparente entre le client et les diff√©rents agents, 
tout en garantissant la qualit√© et la tra√ßabilit√© des informations.

---

CONTEXTE DOCUMENTAIRE :
{contexte}


QUESTION DE L'UTILISATEUR :
{question}

LISTE DES AGENTS DISPONIBLES :
{AGENTS_DISPONIBLES}

R√âPONSE :
"""

def classifier_intention(question: str) -> str:
    """
    Classifie la question pour d√©terminer l'agent de destination.
    
    Args:
        question: La question de l'utilisateur
        
    Returns:
        Le nom de l'agent de destination (e.g., 'fiscalite', 'non_pertinent')
    """
    print(f"\nüß† Classification de l'intention pour : '{question}'")
    
    # Construire le prompt complet
    prompt = PROMPT_SYSTEME.format(question=question)
    
    try:
        # Appeler le mod√®le
        # Utiliser un mod√®le rapide pour la classification
        response = model.generate_content(prompt) 
        
        # Nettoyer la r√©ponse (le mod√®le ne devrait r√©pondre que par le nom de l'agent)
        agent_cible = response.text.strip().lower()
        
        # V√©rifier si l'agent cible fait partie de la liste ou est 'non_pertinent'
        if agent_cible not in AGENTS_DISPONIBLES and agent_cible != 'non_pertinent':
             # Si le mod√®le hallucine, forcer une valeur de s√©curit√©
             return "non_pertinent"
        
        print(f" ¬† ‚úÖ Agent cible identifi√© : {agent_cible}")
        return agent_cible
        
    except Exception as e:
        print(f" ¬† ‚ùå Erreur lors de la classification : {e}")
        return "erreur_interne"


def extraire_mots_cles(question: str) -> List[str]:
    """
    Extrait les mots-cl√©s pertinents d'une question.
    Version am√©lior√©e avec normalisation et filtrage.
    
    Args:
        question: La question de l'utilisateur
        
    Returns:
        Liste de mots-cl√©s normalis√©s
    """
    # Mots vides fran√ßais √† ignorer
    mots_vides = {
        'le', 'la', 'les', 'un', 'une', 'des', 'de', 'du', 'au', 'aux',
        'et', 'ou', 'mais', 'donc', 'or', 'ni', 'car',
        'je', 'tu', 'il', 'elle', 'nous', 'vous', 'ils', 'elles',
        'mon', 'ma', 'mes', 'ton', 'ta', 'tes', 'son', 'sa', 'ses',
        'ce', 'cet', 'cette', 'ces',
        'qui', 'que', 'quoi', 'dont', 'o√π',
        'est', 'sont', '√™tre', 'avoir', 'faire',
        'pour', 'dans', 'sur', 'avec', 'sans', 'sous', 'par',
        'quoi', 'quel', 'quelle', 'quels', 'quelles',
        'comment', 'combien', 'pourquoi', 'quand',
        'c', 'qu', 'd', 'l', 's', 't', 'n', 'm'
    }
    
    # Normaliser et d√©couper
    question_lower = question.lower()
    mots = question_lower.split()
    
    # Filtrer et nettoyer
    mots_cles = []
    for mot in mots:
        # Retirer la ponctuation
        mot_clean = ''.join(c for c in mot if c.isalnum() or c in ['√©', '√®', '√™', '√†', '√¢', '√π', '√ª', '√¥', '√Æ', '√ß'])
        
        # Garder seulement si pas un mot vide et assez long
        if mot_clean and mot_clean not in mots_vides and len(mot_clean) >= 3:
            mots_cles.append(mot_clean)
    
    return mots_cles




def generer_reponse(question: str, contexte: str) -> str:
    """
    G√©n√®re une r√©ponse en utilisant le mod√®le LLM avec le contexte fourni.
    
    Args:
        question: La question de l'utilisateur
        contexte: Le contexte documentaire
        
    Returns:
        La r√©ponse g√©n√©r√©e
    """
    print(f"\nü§ñ G√©n√©ration de la r√©ponse avec le mod√®le LLM...")
    
    # Construire le prompt complet
    prompt = PROMPT_SYSTEME.format(
        contexte=contexte,
        question=question
    )
    
    try:
        # Appeler le mod√®le
        response = model.generate_content(prompt)
        reponse_text = response.text
        
        print(f"   ‚úÖ R√©ponse g√©n√©r√©e ({len(reponse_text)} caract√®res)")
        return reponse_text
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la g√©n√©ration : {e}")
        raise


@functions_framework.http
def agent_client(request):
    """
    Point d'entr√©e de l'agent client.
    Re√ßoit une question et retourne la question √† l'agent apte √† r√©pondre et retourne la r√©ponse de cette agent.
    """
    # G√©rer CORS
    if request.method == 'OPTIONS':
        headers = {
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'POST',
            'Access-Control-Allow-Headers': 'Content-Type',
        }
        return ('', 204, headers)
    
    headers = {
        'Access-Control-Allow-Origin': '*'
    }
    
    try:
        # R√©cup√©rer la question
        request_json = request.get_json(silent=True)
        
        if not request_json or 'question' not in request_json:
            return jsonify({
                "erreur": "Aucune question fournie. Utilisez le format: {\"question\": \"votre question\"}"
            }), 400, headers
        
        question = request_json['question']
        print(f"\n{'='*80}")
        print(f"üì® Question re√ßue : {question}")
        print(f"{'='*80}")
        
        # √âTAPE 1: Identifier le th√®me 
        
        
        # √âTAPE 2: Rediriger la question au bon agent 
        
        # √âTAPE 3: G√©n√©rer la r√©ponse de l'agent 
        
        # Etape 4 : Retourner la r√©ponse de l'agent avec les sources
        
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        return jsonify({
            "erreur": "Erreur lors de la g√©n√©ration de la r√©ponse.",
            "details": str(e)
        }), 500, headers


if __name__ == "__main__":
    # Test local
    print("Test local de l'agent client V2...")
    
    question_test = "C'est quoi la TVA ?"
    
    print(f"\nQuestion de test : {question_test}")
    
    # Simuler la recherche
    chunks = rechercher_chunks(question_test)
    
    if chunks:
        contexte = construire_contexte(chunks)
        print(f"\nContexte construit ({len(contexte)} caract√®res)")
        print("\nPremiers 500 caract√®res du contexte:")
        print("-"*80)
        print(contexte[:500])
        print("-"*80)
    else:
        print("\n‚ö†Ô∏è  Aucun chunk trouv√©")

